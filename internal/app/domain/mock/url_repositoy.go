// Code generated by MockGen. DO NOT EDIT.
// Source: url.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	url "url-shortener/internal/app/domain/entity/url"
	model "url-shortener/internal/app/repository/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIURLRepository is a mock of IURLRepository interface.
type MockIURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIURLRepositoryMockRecorder
}

// MockIURLRepositoryMockRecorder is the mock recorder for MockIURLRepository.
type MockIURLRepositoryMockRecorder struct {
	mock *MockIURLRepository
}

// NewMockIURLRepository creates a new mock instance.
func NewMockIURLRepository(ctrl *gomock.Controller) *MockIURLRepository {
	mock := &MockIURLRepository{ctrl: ctrl}
	mock.recorder = &MockIURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLRepository) EXPECT() *MockIURLRepositoryMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockIURLRepository) AddBatch(context context.Context, batches []url.Batch, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", context, batches, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockIURLRepositoryMockRecorder) AddBatch(context, batches, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockIURLRepository)(nil).AddBatch), context, batches, userID)
}

// AddShorten mocks base method.
func (m *MockIURLRepository) AddShorten(context context.Context, originalURL, shortURL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShorten", context, originalURL, shortURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShorten indicates an expected call of AddShorten.
func (mr *MockIURLRepositoryMockRecorder) AddShorten(context, originalURL, shortURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShorten", reflect.TypeOf((*MockIURLRepository)(nil).AddShorten), context, originalURL, shortURL, userID)
}

// DeleteBatch mocks base method.
func (m *MockIURLRepository) DeleteBatch(event url.DeleteBatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockIURLRepositoryMockRecorder) DeleteBatch(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockIURLRepository)(nil).DeleteBatch), event)
}

// GetAllByUserID mocks base method.
func (m *MockIURLRepository) GetAllByUserID(context context.Context, userID string) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", context, userID)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockIURLRepositoryMockRecorder) GetAllByUserID(context, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockIURLRepository)(nil).GetAllByUserID), context, userID)
}

// GetByOriginalURL mocks base method.
func (m *MockIURLRepository) GetByOriginalURL(context context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalURL", context, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalURL indicates an expected call of GetByOriginalURL.
func (mr *MockIURLRepositoryMockRecorder) GetByOriginalURL(context, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalURL", reflect.TypeOf((*MockIURLRepository)(nil).GetByOriginalURL), context, originalURL)
}

// GetOriginalByID mocks base method.
func (m *MockIURLRepository) GetOriginalByID(context context.Context, shortURL string) (model.URLData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalByID", context, shortURL)
	ret0, _ := ret[0].(model.URLData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalByID indicates an expected call of GetOriginalByID.
func (mr *MockIURLRepositoryMockRecorder) GetOriginalByID(context, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalByID", reflect.TypeOf((*MockIURLRepository)(nil).GetOriginalByID), context, shortURL)
}
